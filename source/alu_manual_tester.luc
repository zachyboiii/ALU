module alu_manual_tester#(
    CLK_FREQ ~ 1000 : CLK_FREQ > 0) 
(
    input clk,  // clock
    input rst,  // reset
    input io_button[5],
    input io_dip[3][8],
    output led[8],
    output io_led[3][8],
    output io_segment[8],
    output io_select[4]
) {
    
    alu alu
    enum States {
        IDLE, // Initial State
        LOWER_A, // Check first 16 bits of alu.a
        UPPER_A, // Check last 16 bits of alu.a
        LOWER_B, // Check first 16 bits of alu.b
        UPPER_B // Check last 16 bits of alu.b
    }
    
    const SEVEN_SEG_DIV = $is_sim() ? 3 : 16
   .clk(clk) {
        
        
        // Instantiate 5 edge detectors, one for each button 
        edge_detector io_button_edge[5](#RISE(5x{{1}}), #FALL(5x{{0}}))
        // Instantiate 5 conditioners, one for each button
        button_conditioner io_button_cond[5](#CLK_FREQ(5x{{1000}})) 
        
        
        .rst(rst) {
            multi_seven_seg seg(#DIV(SEVEN_SEG_DIV))
            dff states[$width(States)](#INIT(States.IDLE)) // each state has a dff, set initial state to idle
            dff a[32](#INIT(0))
            dff b[32](#INIT(0))
        }
    }
    
    
    always {    
        // Set first 3 digits of 7 segment to show values of z, v and n respectively
        seg.values = {c{3b0,alu.z},c{3b0,alu.v},c{3b0,alu.n},4b0}
        
        // Connect buttons and ensure only inputs at rising edge is taken
        io_button_cond.in = io_button
        io_button_edge.in =  io_button_cond.out
        
        // Connect dffs
        states.d = states.q
        a.d = a.q
        b.d = b.q
        
        
        // Initialise a and b
        alu.a =  a.q
        alu.b = b.q
        
        // Leftmost section of IO dip switches, from right to left
        alu.alufn = io_dip[2][5:0]
        
        // leds above dip switches
        io_led = 3x{{8h0}}
        
        // 7 segment display value
        io_segment = 0
        
        // 4 sections of 7 segment leds
        io_select = 4hF
        
        // Tester logic:
        led = alu.out[7:0]
        io_led[0] = alu.out[15:8]
        io_led[1] = alu.out[23:16]
        io_led[2] = alu.out[31:24]
        
        
        case(states.q){
            States.IDLE:
                if (io_button_edge.out[0]){ // io_button[0] for reading bits of a
                states.d = States.LOWER_A
                } else if(io_button_edge.out[2]){ //  io_button[2] for reading bits of b
                states.d = States.LOWER_B
                } 
    
            States.LOWER_A:
                a.d[7:0] = io_dip[0]
                a.d[15:8] = io_dip[1]
                if (io_button_edge.out[1]){
                states.d = States.UPPER_A // Move to States.UPPER_A to read next 16 bits of A
                }
            States.UPPER_A:
                a.d[23:16] = io_dip[0] // Read back 8 bits
                a.d[31:24] = io_dip[1] // Read front 8 bits
                if (io_button_edge.out[1]) {
                    states.d = States.IDLE  // Move to States.IDLE
                }
            States.LOWER_B:
                b.d[7:0] = io_dip[0] // Read back 8 bits
                b.d[15:8] = io_dip[1] // Read front 8 bits
                if (io_button_edge.out[1]) {
                    states.d = States.UPPER_B  // Move to States.UPPER_B to read next 16 bits of B
                }
            States.UPPER_B:
                b.d[23:16] = io_dip[0] // Read back 8 bits
                b.d[31:24] = io_dip[1] // Read front 8 bits
                if (io_button_edge.out[1]) {
                    states.d = States.IDLE  // Move to States.END
                }
        }
        io_segment = ~seg.seg
        io_select = ~seg.sel
    }
}
