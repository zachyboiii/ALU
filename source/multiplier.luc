module multiplier (
    input a[32],
    input b[32],
    output mul[32]
) {
    fa fa[496] // 496 adders required for 32-bit mult
    sig current_row_fa_index[$clog2(496)]
    sig previous_row_fa_index[$clog2(496)]
    
    always {
        // LSB out 
        mul[0] = b[0] & a[0]
        
        // 1st row has 31 FAs 
        repeat(i,31){ // i == 0 to 30 inclusive
            fa.a[i] = a[i] & b[1]
            fa.b[i] = a[i+1] & b[0]
            if (i == 0){
                fa.cin[i] = 0 // set the cin input of the leading FA to be 0
            }
            else{
                fa.cin[i] = fa.cout[i-1]
            }
        }
        
        previous_row_fa_index = 0
        current_row_fa_index = 31
        
        // bit 1 out
        mul[1] = fa.s[previous_row_fa_index]
        
        // do this for the 2nd, 3rd, 4th... all the way to 30th row (ie. 2nd last row)
        repeat(i, 30, 2){ // i == 2 to 30 inclusive 
            repeat(j, 32-i){ // do this for each of the (32-i) FAs in the ith row
                fa.a[current_row_fa_index + j] = a[j] & b[i]
                fa.b[current_row_fa_index + j] = fa.s[previous_row_fa_index+1+j]
                if (j==0){
                    fa.cin[current_row_fa_index + j] = 0
                }
                else{
                    fa.cin[current_row_fa_index + j] = fa.cout[current_row_fa_index + j - 1]
                }
            }
            previous_row_fa_index = current_row_fa_index
            current_row_fa_index = current_row_fa_index + 32 - i
            mul[i] = fa.s[previous_row_fa_index]
        }
    }
}