module x_bit_right_shifter #(
  // parameter declaration, to be set during module instantiation
  // default value given is 8
  SHIFT = 8 : SHIFT > -1 & SHIFT < 32
  )(
    input a[32],
    input shift,
    input pad,
    output out[32]
  ) {
  
  // module declarations
  // instantiate mux_2 (32 of them)
  mux_2 mux_2_32[32]
  // other useful intermediary signals, e.g: shifted_bits[32]
  sig shifted_bits[32]
  
  always {
    // assign value to shifted_bits[32] depending on the value of SHIFT
    shifted_bits = c{SHIFTx{pad},a[31:SHIFT]}
    
    // connect the selector of each mux_2 with shift 
    mux_2_32.s0 = 32x{shift}
    // use a repeat-loop to: 
    // connect input[0] of each mux_2 with a[i]
    // connect input[1] of each mux_2 with the shifted_bits[i]
    repeat(i,32){
        mux_2_32.in[i][0] = a[i]
        mux_2_32.in[i][1] = shifted_bits[i]
        }
  
    out = mux_2_32.out
  }
}